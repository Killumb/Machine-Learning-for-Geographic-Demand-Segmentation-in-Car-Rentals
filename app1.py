
import streamlit as st
import pandas as pd
import lightgbm as lgb
import os
import json

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(
    page_title="–°–æ–≤–µ—Ç–Ω–∏–∫ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é –∞–≤—Ç–æ–ø–∞—Ä–∫–∞",
    page_icon="üí°",
    layout="wide"
)

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º) ---
@st.cache_resource
def load_artifacts():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –ø–æ—Ä–æ–≥–∏ –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫."""
    paths = {
        "model": 'models/lgbm_model.txt',
        "city_stats": 'processed_data/city_stats.csv',
        "train_cols": 'processed_data/X_train.csv',
        "thresholds": 'processed_data/demand_thresholds.json'
    }

    if not all(os.path.exists(p) for p in paths.values()):
        st.error("–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ Jupyter –Ω–æ—É—Ç–±—É–∫–∏ (–≠—Ç–∞–ø—ã 2 –∏ 3).")
        return None, None, None, None

    model = lgb.Booster(model_file=paths["model"])
    city_stats = pd.read_csv(paths["city_stats"])
    train_cols = pd.read_csv(paths["train_cols"]).columns
    
    with open(paths["thresholds"], 'r') as f:
        thresholds = json.load(f)

    # –ò—Å–∫–ª—é—á–∞–µ–º 'leaky' –ø—Ä–∏–∑–Ω–∞–∫–∏
    features_to_drop = ['rating', 'reviewCount']
    train_cols = [col for col in train_cols if col not in features_to_drop]
    
    return model, city_stats, train_cols, thresholds

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
model, city_stats, train_cols, thresholds = load_artifacts()

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
st.title('üí° –°–æ–≤–µ—Ç–Ω–∏–∫ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é –∞–≤—Ç–æ–ø–∞—Ä–∫–∞')
st.markdown("–≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä—ã–Ω–∫–∞ –∏ –¥–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–≤–µ–ª–∏—á–µ–Ω–∏—é –∏–ª–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—é –∞–≤—Ç–æ–ø–∞—Ä–∫–∞.")

if model is not None:
    col1, col2 = st.columns([1, 2])

    with col1:
        st.header("‚öôÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π")
        city = st.selectbox('1. –ì–æ—Ä–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:', city_stats['location.city'].unique())
        v_type = st.selectbox('2. –¢–∏–ø –∞–≤—Ç–æ–º–æ–±–∏–ª—è:', ['car', 'suv', 'truck', 'van', 'minivan'])
        v_age = st.slider('3. –í–æ–∑—Ä–∞—Å—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–ª–µ—Ç):', 1, 15, 1)
        fuel_type = st.radio("4. –¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞:", ('GASOLINE', 'HYBRID', 'ELECTRIC'), horizontal=True)
        predict_button = st.button('üìà –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é', use_container_width=True, type="primary")

    if predict_button:
        # --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (–ª–æ–≥–∏–∫–∞ –æ—Å—Ç–∞–ª–∞—Å—å —Ç–æ–π –∂–µ) ---
        current_city_stats = city_stats[city_stats['location.city'] == city].iloc[0]
        features = pd.DataFrame(columns=train_cols)
        features.loc[0] = 0
        
        features['vehicle.age'] = v_age
        features['rate.daily'] = current_city_stats['city_avg_rate']
        features['city_avg_trips'] = current_city_stats['city_avg_trips']
        features['city_car_count'] = current_city_stats['city_car_count'] + 1
        features['city_avg_rate'] = current_city_stats['city_avg_rate']
        
        if f'vehicle.type_{v_type}' in features.columns:
            features[f'vehicle.type_{v_type}'] = True
        if f'fuelType_{fuel_type}' in features.columns:
            features[f'fuelType_{fuel_type}'] = True
        
        features = features.astype(float)
        prediction = model.predict(features)[0]

        # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π ---
        with col2:
            st.header("üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –∏ –∞–Ω–∞–ª–∏–∑")
            
            # –ë–ª–æ–∫ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–æ–≥–Ω–æ–∑–æ–º
            st.metric(label="–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–µ–∑–¥–æ–∫", value=f"{prediction:.1f}")
            st.caption(f"–î–ª—è –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Ç–∏–ø–∞ '{v_type}' –≤ –≥–æ—Ä–æ–¥–µ {city}.")
            
            # –ë–ª–æ–∫ —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π
            avg_demand = thresholds['average_demand']
            high_demand = thresholds['high_demand']
            
            st.write("---")
            
            if prediction > high_demand:
                st.success(f"**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –£–≤–µ–ª–∏—á–∏—Ç—å –∞–≤—Ç–æ–ø–∞—Ä–∫.**", icon="üöÄ")
                st.write(f"–ü—Ä–æ–≥–Ω–æ–∑ ({prediction:.1f} –ø–æ–µ–∑–¥–æ–∫) **–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –≤—ã—à–µ** –≤—ã—Å–æ–∫–æ–≥–æ –ø–æ—Ä–æ–≥–∞ —Å–ø—Ä–æ—Å–∞ –ø–æ —Ä—ã–Ω–∫—É ({high_demand:.1f} –ø–æ–µ–∑–¥–æ–∫). "
                         f"–≠—Ç–æ —Å–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª –æ —Ç–æ–º, —á—Ç–æ –≤ –≥–æ—Ä–æ–¥–µ **{city}** —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω—ã–π —Å–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ —Ç–∏–ø–∞ **{v_type}**. "
                         "–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø–∞—Ä–∫–∞ –≤ —ç—Ç–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–º–µ–µ—Ç –≤—ã—Å–æ–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —É—Å–ø–µ—Ö–∞.")
            elif prediction > avg_demand:
                st.info(f"**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–∞—Ä–∫–∞.**", icon="üëç")
                st.write(f"–ü—Ä–æ–≥–Ω–æ–∑ ({prediction:.1f} –ø–æ–µ–∑–¥–æ–∫) **–≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ** —É—Ä–æ–≤–Ω—è —Å–ø—Ä–æ—Å–∞ –ø–æ —Ä—ã–Ω–∫—É ({avg_demand:.1f} –ø–æ–µ–∑–¥–æ–∫). "
                         f"–≠—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –æ —Å—Ç–∞–±–∏–ª—å–Ω–æ–º —Å–ø—Ä–æ—Å–µ. –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –æ–ø—Ä–∞–≤–¥–∞–Ω–Ω—ã–º, –Ω–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–≤–æ–æ—á–µ—Ä–µ–¥–Ω—ã–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å —Ä—ã–Ω–∫–∞–º–∏ —Å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º.")
            else:
                st.warning(f"**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ù–µ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –∞–≤—Ç–æ–ø–∞—Ä–∫ / –°–æ–∫—Ä–∞—Ç–∏—Ç—å.**", icon="‚ö†Ô∏è")
                st.write(f"–ü—Ä–æ–≥–Ω–æ–∑ ({prediction:.1f} –ø–æ–µ–∑–¥–æ–∫) **–Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ** —É—Ä–æ–≤–Ω—è —Å–ø—Ä–æ—Å–∞ –ø–æ —Ä—ã–Ω–∫—É ({avg_demand:.1f} –ø–æ–µ–∑–¥–æ–∫). "
                         f"–≠—Ç–æ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞—Å—ã—â–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞ –∏–ª–∏ –Ω–∏–∑–∫—É—é –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (—Ç–∏–ø/–≤–æ–∑—Ä–∞—Å—Ç –∞–≤—Ç–æ) –≤ –≥–æ—Ä–æ–¥–µ **{city}**. "
                         "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ –∏–ª–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ –≥–æ—Ä–æ–¥–∞/—Ç–∏–ø—ã –∞–≤—Ç–æ.")

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            st.write("---")
            st.subheader("–†—ã–Ω–æ—á–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç")
            sub_col1, sub_col2 = st.columns(2)
            sub_col1.metric("–°—Ä–µ–¥–Ω–∏–π —Å–ø—Ä–æ—Å –≤ —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ", f"{current_city_stats['city_avg_trips']:.1f} –ø–æ–µ–∑–¥–æ–∫")
            sub_col2.metric("–£—Ä–æ–≤–µ–Ω—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏ (–∞–≤—Ç–æ)", f"{int(current_city_stats['city_car_count'])}")